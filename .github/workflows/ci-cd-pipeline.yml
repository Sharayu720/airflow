name: Deploy Apache Airflow to Test Environment

on:
  push:
    branches:
      - test

jobs:
  deploy:
    runs-on: self-hosted  # Using self-hosted runner

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python 3.9
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv airflow_venv
          source airflow_venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: SSH to EC2 instance and configure Airflow
      - name: SSH to EC2 instance and configure Airflow
        run: |
          echo "Starting SSH session to EC2 instance..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa
          
          # Enable verbose output for SSH
          ssh -v -o StrictHostKeyChecking=no -i /tmp/id_rsa ec2-user@${{ secrets.EC2_PRIVATE_IP }} << 'EOF'
            echo "Setting up directories and permissions..."
            sudo mkdir -p /home/ec2-user/airflow/logs/scheduler
            sudo mkdir -p /home/ec2-user/airflow/logs/webserver
            sudo chown -R ec2-user:ec2-user /home/ec2-user/airflow
            sudo chmod -R 777 /home/ec2-user/airflow/logs

            echo "Initializing Airflow DB..."
            source /home/ec2-user/airflow/airflow_venv/bin/activate
            export AIRFLOW_HOME=/home/ec2-user/airflow
            airflow db init

            echo "Creating Airflow Admin user..."
            airflow users create --username admin --firstname John --lastname Doe --email john.doe@example.com --role Admin --password "${{ secrets.AIRFLOW_ADMIN_PASSWORD }}"

            echo "Starting Airflow Webserver and Scheduler..."
            nohup airflow webserver -p 8080 &
            nohup airflow scheduler &
          EOF

      # Step 5: Upload DAGs to EC2 instance
      - name: Upload DAGs to EC2 instance
        run: |
          echo "Uploading DAGs to EC2 instance..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa
          
          scp -o StrictHostKeyChecking=no -i /tmp/id_rsa -r ./dags/ ec2-user@${{ secrets.EC2_PRIVATE_IP }}:/home/ec2-user/airflow/dags/

      # Step 6: Restart Airflow Services
      - name: Restart Airflow Services
        run: |
          echo "Restarting Airflow webserver and scheduler..."
          ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa ec2-user@${{ secrets.EC2_PRIVATE_IP }} "sudo systemctl restart airflow-webserver"
          ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa ec2-user@${{ secrets.EC2_PRIVATE_IP }} "sudo systemctl restart airflow-scheduler"

      # Step 7: Check Airflow Webserver Health
      - name: Check Airflow Webserver Health
        run: |
          echo "Waiting for Airflow Webserver to be ready..."
          for i in {1..10}; do
            if curl --silent --fail http://localhost:8080; then
              echo "Airflow Webserver is up and running!"
              exit 0
            else
              echo "Attempt $i: Airflow Webserver is not ready yet. Retrying in 5 seconds..."
              sleep 5
            fi
          done
          echo "Airflow Webserver is still not ready after 10 attempts."
          exit 1
