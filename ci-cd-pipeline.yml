name: Deploy Apache Airflow to Test Environment

on:
  push:
    branches:
      - test  # Trigger on push to the 'test' branch

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv airflow_venv
          source airflow_venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Set up Airflow Database (SQLite for testing)
      - name: Set up Airflow Database (SQLite)
        run: |
          source airflow_venv/bin/activate
          export AIRFLOW_HOME=/home/ubuntu/airflow
          airflow db init

      # Step 5: Create Airflow Admin User
      - name: Create Airflow Admin User
        run: |
          source airflow_venv/bin/activate
          airflow users create \
            --username admin \
            --firstname John \
            --lastname Doe \
            --email john.doe@example.com \
            --role Admin \
            --password ${{ secrets.AIRFLOW_ADMIN_PASSWORD }}

      # Step 6: Install and Configure Nginx for Reverse Proxy
      - name: Install and Configure Nginx
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx
          sudo cp nginx.conf /etc/nginx/sites-available/airflow
          sudo ln -s /etc/nginx/sites-available/airflow /etc/nginx/sites-enabled/
          sudo systemctl restart nginx

      # Step 7: Start Airflow Webserver
      - name: Start Airflow Webserver
        run: |
          source airflow_venv/bin/activate
          nohup airflow webserver -p 8080 &

      # Step 8: Start Airflow Scheduler
      - name: Start Airflow Scheduler
        run: |
          source airflow_venv/bin/activate
          nohup airflow scheduler &

      # Step 9: Upload DAG files to EC2 instance
      - name: Upload DAGs to EC2 instance
        run: |
          # Ensure to set the correct path to your private key file and EC2 instance details
          scp -i /path/to/your/key.pem -r ./dags/ ubuntu@your-ec2-ip:/home/ubuntu/airflow/dags/

      # Step 10: Restart Airflow Services (optional)
      - name: Restart Airflow Services
        run: |
          sudo systemctl restart airflow-webserver
          sudo systemctl restart airflow-scheduler

      # Step 11: Health check (optional)
      - name: Check Airflow Webserver Health
        run: |
          curl --fail http://localhost:8080 || exit 1
