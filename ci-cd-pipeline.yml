name: Deploy Apache Airflow to Test Environment

on:
  push:
    branches:
      - test  # Trigger on push to the 'test' branch

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv airflow_venv  # Create a virtual environment
          source airflow_venv/bin/activate  # Activate the virtual environment
          pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt  # Install dependencies from requirements.txt

      # Step 4: Set up Airflow Database (SQLite for testing)
      - name: Set up Airflow Database (SQLite)
        run: |
          source airflow_venv/bin/activate
          export AIRFLOW_HOME=/home/ubuntu/airflow
          airflow db init  # Initialize the database (using SQLite)

      # Step 5: Create Airflow Admin User (optional)
      - name: Create Airflow Admin User
        run: |
          source airflow_venv/bin/activate
          airflow users create \
            --username admin \
            --firstname John \
            --lastname Doe \
            --email john.doe@example.com \
            --role Admin \
            --password ${{ secrets.AIRFLOW_ADMIN_PASSWORD }}

      # Step 6: Configure Nginx for Reverse Proxy
      - name: Install and Configure Nginx
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx  # Install Nginx
          sudo cp nginx.conf /etc/nginx/sites-available/airflow  # Copy Nginx config
          sudo ln -s /etc/nginx/sites-available/airflow /etc/nginx/sites-enabled/  # Enable site
          sudo systemctl restart nginx  # Restart Nginx

      # Step 7: Start Airflow Webserver
      - name: Start Airflow Webserver
        run: |
          source airflow_venv/bin/activate
          nohup airflow webserver -p 8080 &  # Start the webserver in the background

      # Step 8: Start Airflow Scheduler
      - name: Start Airflow Scheduler
        run: |
          source airflow_venv/bin/activate
          nohup airflow scheduler &  # Start the scheduler in the background

      # Step 9: Health check (Check if the webserver is running)
      - name: Check Airflow Webserver Health
        run: |
          curl --fail http://localhost:8080 || exit 1  # Verify the webserver is running

      # Optional: Verify the Airflow UI
      - name: Verify Airflow UI (Optional)
        run: |
          curl --fail http://localhost:8080/admin || exit 1  # Check if the Airflow UI loads
